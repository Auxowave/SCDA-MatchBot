import discord


class MatchReview(discord.ui.View):
    """
    A View to handle match submissions, offering Accept and Reject buttons.

    Attributes:
        ctx (discord.ApplicationContext): The context of the slash command that initiated the view.
        match (str): The identifier of the match being submitted.
    """
    def __init__(self, ctx, match, opp, score, urls, division, bot, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.ctx = ctx
        self.match = match
        self.opp = opp
        self.score = score
        self.urls = urls
        self.division = division
        self.bot = bot

    @discord.ui.button(label="Accept", style=discord.ButtonStyle.success)
    async def accept_button(self, _: discord.ui.Button, interaction: discord.Interaction):
        """
        Handles the Accept button click: marks the match as accepted and informs the submitter.

        Parameters:
            _ (discord.ui.Button): The button clicked, unused.
            interaction (discord.Interaction): The interaction generated by the button click.
        """
        await interaction.response.edit_message(content=f"Match {self.match[0]} submission accepted!", view=None)
        await self.ctx.channel.send(f"<@{self.ctx.user.id}> your match submission has been accepted by"
                                    f" {interaction.user}.")
        await self.bot.process_match_result(self.ctx, self.match, self.opp, self.score, self.urls, self.division)

    @discord.ui.button(label="Reject", style=discord.ButtonStyle.danger)
    async def reject_button(self, _: discord.ui.Button, interaction: discord.Interaction):
        """
        Presents a modal for the moderator to enter a rejection reason.

        Parameters:
            _ (discord.ui.Button): The button clicked, unused.
            interaction (discord.Interaction): The interaction generated by the button click.
        """
        modal = RejectionModal(title="Match Rejection Reason", ctx=self.ctx, original_interaction=interaction)
        await interaction.response.send_modal(modal)
        await interaction.edit_original_response(content=f"Match {self.match[0]} submission rejected! (by "
                                                         f"{interaction.user.name})", view=None)


class RejectionModal(discord.ui.Modal):
    """
    A modal for moderators to specify the reason for rejecting a match submission.

    Attributes:
        ctx (discord.ApplicationContext): The context of the command that initiated the modal.
    """
    def __init__(self, ctx, original_interaction, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.ctx = ctx
        self.original_interaction = original_interaction
        self.add_item(discord.ui.InputText(label="Reason for Rejection", style=discord.InputTextStyle.short))

    async def callback(self, interaction: discord.Interaction):
        """
        Sends the rejection reason to the original submission channel and confirms the action to the moderator.

        Parameters:
            interaction (discord.Interaction): The interaction generated by the modal submission.
        """
        # Send the reason to the original channel
        await self.ctx.channel.send(f"<@{self.ctx.user.id}> your match submission has been rejected: "
                                    f"{self.children[0].value}")
        await interaction.response.send_message("Rejection reason submitted successfully.", ephemeral=True)
